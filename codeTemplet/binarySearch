1、二分搜索的适用场景
二分搜索主要用于有序的数据结构搜索，通常为有序数组内搜索某个target

二分搜索代码框架简单但是边界条件是魔鬼
2、二分搜索的代码框架
2.1 最基本的二分搜索，在没有重复元素的有序数组（注意是没有重复元素的有序数组）中搜索目标数target的索引
public int binarySearch(int[] nums, int target){
       int left = 0;
       int reight = nums.length - 1;
       while(left <= right){
           int mid = left + (right - left) / 2;  //这么写的原因是防止整数溢出
            if(nums[mid] < target){
            left = mid + 1;
            }else if(nums[mid] > target){
                right = mid - 1;
            }else if(nums[mid] == target){
                return mid;
              }
       }
       return -1;
}

2.2 二分搜索左边界，在有重复元素的有序数组中搜索target的最小索引
public int leftBinarySearch(int[] nums, int target){
       int left = 0;
       int reight = nums.length - 1;
       while(left <= right){
           int mid = left + (right - left) / 2;
            if(nums[mid] < target){
            left = mid + 1;
            }else if(nums[mid] > target){
                right = mid - 1;
            }else if(nums[mid] == target){
                right = mid - 1;
              }
       }
       //最后要检查left是否越界；也要检查left索引位置的数是不是target
       if(left >= nums.length || nums[left] != target){
       return -1;
       }
       return left;
}

2.3 二分搜索左边界，在有重复元素的有序数组中搜索target的最大索引
public int rightBinarySearch(int[] nums, int target){
       int left = 0;
       int reight = nums.length - 1;
       while(left <= right){
           int mid = left + (right - left) / 2;
            if(nums[mid] < target){
            left = mid + 1;
            }else if(nums[mid] > target){
                right = mid - 1;
            }else if(nums[mid] == target){
                left = mid + 1;
              }
       }
       //最后要检查right是否越界；也要检查right索引位置的数是不是target
       if(right < 0 || nums[right] != target){
       return -1;
       }
       return right;
}